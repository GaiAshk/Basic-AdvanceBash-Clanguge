problem1sol.sh 

cat war-and-peace.txt | tr "[:punct:]" " " | tr "[:space:]" "\n" | tr "A-Z" "a-z" | grep -v '[[:digit:]]' | sort | uniq | grep [a-z]$ > war-unique-word.txt
cat /share/ex_data/ex3/war-unique-words.txt | grep -E '[^auiyeo]{4,}' > war-4consonant.txt
cat war-and-peace.txt | tr "[:punct:]" " " | tr "[:space:]" "\n" | tr "A-Z" "a-z"  | sort | grep -E '([a|e].*){4,}' | uniq -c | sort -n | tail -n1 | sed 's/[[:space:]]*//' | sed 's/\([0-9].*\) \(.*\)/The word \2 appears \1 times in file./'


problem2sol.sh 

ls -l $dir |tr -s " " | cut -f5,9 -d" " | grep ^0 | cut -f2 -d" " > empty_file.out
ls -l $dir |tr -s " " | cut -f6-9 -d" " | grep -E '(f|F)ile.' | sed 's/\(.* .* .*\) \(.*\)/File \2 last updated on \1/' > updates.out
ls -l $dir | sed 's/\(Apr [ 1-9][[:digit:]*]\)/\1th/' | sed 's/\(Apr [ 2-9]1\)th/\1st/' | sed 's/\(Apr [ 2-9]2\)th/\1nd/' | sed 's/\(Apr [ 2-9]3\)th/\1rd/' > proper_dates.out

//idans solution is better then the one below 
ls -l $dir | sed 's/\(Apr [ 2-9]1\)/\1st/' | sed 's/\(Apr [ 2-9]2\)/\1nd/' | sed 's/\(Apr [ 2-9]3\)/\1rd/' | sed 's/\(Apr [1][0-9]\)/\1th/' | sed 's/\(Apr [ ][4-9]\)/\1th/' > proper_dates.out


problem3sol.sh

ls -l $dir | grep '^dr..r..r' | tr -s " " | cut -f9 -d" "



isfile.sh

path=$1
#checks if given path is a diractory with read permissions
if [ -d "$path" ] && [ -r "$path" ]; then
        echo "1"
#checks if given path is a file with read permissions
elif [ -e "$path" ] && [ -r "$path" ]; then
        echo "0"
#else the path doesnt exist or is not readable
else
        echo "-1"
fi

dir_depth 3.3 
#!/bin/bash

path=$1
dir_size=0

#check if the script arguent was given by user
if [ $# -eq 0 ]; then
        echo "Usage: ./dir_depth.sh <path>"
        exit 1
fi

#crates variables
is_dir='./isdir.sh $path'

#In case of valid file
if [ $is_dir -eq 0 ]; then
        echo "0"
#In case no such path or no read permissions
elif [ $is_dir -eq -1 ]; then
        echo "No Such Path" $1
        exit 1
#now checks that the path is a directory and if true checks if there are subdirectories
else
        sub_dir='dir=$path; source list_dirs.sh'
        if [ -z "$sub_dir" ]; then
                ((dir_size++))
        else
                for i in $sub_dir
                #checks if has a valid sub directories
                do
                        dir_dep='./dir_depth.sh $path/$i'
                        if [ $dir_dep -gt $dir_size ]; then
                                dir_size=$dir_dep
                        fi
                done
                ((dir_size++))
        fi
fi
echo "$dir_size"



nadav

#!/bin/bash

dir=$1
deep=0

#check for empty arg
if [ $# -eq 0 ]; then
        echo "Usage: ./dir_depth.sh <path>"
        exit 1
fi

#check if file or dir
is_dir=`./isdir.sh $dir`

#if dir is a file, deep=0
if [ $is_dir -eq 0 ]; then
        deep=0
#if dir not exist or doesnt have read access print error and exit 1
elif [ $is_dir -eq -1 ]; then
        echo "no such path " $1
        exit 1
else
#if dir is directory and check for subdir
   subdirs=`dirnow=$dir; source list_dirs.sh`
        if [ -z "$subdirs" ]; then
                ((deep++))
        else
                for sub in $subdirs
                do
                        recurs_check=`./dir_depth.sh $dir/$sub`
                        if [ $recurs_check -gt $deep ]; then
                                deep=$recurs_check
                        fi
                done
                ((deep++))
        fi
fi
echo $deep